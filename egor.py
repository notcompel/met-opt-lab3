
# 1)
# def func(p):
#     return lambda x: p[0] + p[1] * x + p[2] * x ** 2 + p[3] * (x + 1) ** 3 + p[4] * x ** 4
#
# expected = [-1.0, 0.05, -3.0, 0.5, -0.1]
#
# (zeros)
# ===============Table===============
# BFGS | 0.0000 | 64 | 63 | 0.0995
# L-BFGS | 0.0000 | 74 | 63 | 0.1060
# Gauss-Newton | 0.0000 | 2 | 2 | 0.0036
# Powell Dog Leg | 3.5658 | 40 | 40 | 0.2371
# AdaGrad | 3.2031 | 6 | 0 | 0.0118
# RMSProp | 3.2030 | 1001 | 0 | 1.3512
# Adam | 3.1699 | 1001 | 0 | 1.3109
#
# (ones)
# ===============Table===============
# BFGS | 0.0000 | 70 | 69 | 0.1130
# L-BFGS | 0.0000 | 147 | 131 | 0.2402
# Gauss-Newton | 0.0000 | 2 | 2 | 0.0058
# Powell Dog Leg | 2.7108 | 40 | 40 | 0.2304
# AdaGrad | 4.5502 | 1001 | 0 | 1.3602
# RMSProp | 4.5482 | 1001 | 0 | 1.3723
# Adam | 3.1838 | 1001 | 0 | 1.3396


# 2)
# def func(p):
#     return lambda x: p[0] + p[1] * (x - 1) + p[2] * x ** 2 + p[3] * (x + 1) ** 3 + p[4] * x ** 4
#
# expected = [4.0, 0.05, -2.0, 0.5, -0.1]
# (ones)
# ===============Table===============
# BFGS | 0.0000 | 70 | 69 | 0.1165
# L-BFGS | 0.0000 | 141 | 125 | 0.2266
# Gauss-Newton | 0.0000 | 2 | 2 | 0.0071
# Powell Dog Leg | 6.1048 | 40 | 40 | 0.2659
# AdaGrad | 4.3331 | 1001 | 0 | 1.4181
# RMSProp | 4.3319 | 1001 | 0 | 1.3403
# Adam | 4.4550 | 1001 | 0 | 1.4173
# (zeros)
# ===============Table===============
# BFGS | 0.0000 | 69 | 68 | 0.1141
# L-BFGS | 0.0013 | 96 | 84 | 0.1608
# Gauss-Newton | 0.0000 | 2 | 2 | 0.0052
# Powell Dog Leg | 3.9238 | 40 | 40 | 0.2757
# AdaGrad | 4.5009 | 1001 | 0 | 1.4150
# RMSProp | 4.4984 | 1001 | 0 | 1.3670
# Adam | 4.4066 | 1001 | 0 | 1.4512